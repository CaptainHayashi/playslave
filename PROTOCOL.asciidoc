The playslave protocol
======================
Matt Windsor <matt.windsor@ury.org.uk>
v1.0, 26th December 2012:
Initial version.

This file describes the protocol that +playslave+ uses to interpret
and respond to commands over standard input and output respectively.

State
-----

+playslave+ operates as a finite state machine whereby commands are
only applicable in certain states and may change the current state.

State names are four characters long and always in title-case.  Where
possible, they line up with the commands used to induce them: for
example, +ejct+ is the command to put +playslave+ in +Ejct+.

State changes are announced via the +STAT+ response in which the
content is first the name of the previous state and then the name of
the new state, separated by _one_ space.

+playslave+ has the following externally visible states:

+Ejct+::
    No file is loaded (Ejct stands for ``ejected'').  This is the initial state.
+Stop+::
    A file is loaded, but playback is currently stopped.
+Play+::
    A file is loaded and presently playing.
+Quit+::
    The +playslave+ system is about to quit.  The +TTFN+ response
    *MUST* be sent by the system before the system quits.

[graphviz]
--------------------------------------------------------------------------------
digraph G
{
    Ejct -> Stop [label="load"];
    Play -> Stop [label="stop"];

    Stop -> Play [label="play"];

    Stop -> Ejct [label="ejct"];
    Play -> Ejct [label="ejct"];
    Play -> Ejct [label="(end of file)"];
    Play -> Ejct [label="(decoding error)"];
    Play -> Ejct [label="(load failure)"];

    Ejct -> Quit [label="quit"];
    Stop -> Quit [label="quit"];
    Play -> Quit [label="quit"];
}
--------------------------------------------------------------------------------

Commands
--------

Requests to +playslave+ are currently referred to in the source as
_commands_.

All commands are of the form +cmdw+ _argument_, where _argument_ may
be empty.  Any amount of whitespace may separate +cmdw+ or _argument_
(including an absence thereof), but no whitespace may precede +cmdw+.

Conventionally, +cmdw+ is lowercase (to distinguish commands better
from responses, and to ease typing when manually working +playslave+).

Any successfully executed command generates the +OKAY+ response with
the content being an echo of the command just read.  This response
*MUST* occur after the command has been executed fully.

+cmdw+ is always exactly four characters long and is drawn from the
following list of commands:

+load+ _file_::
    Loads _file_, where _file_ is an unescaped path to a valid audio
    file.  If successful, the state will change to *Stop*.
+
.Example of +load+
================================================================================
    <-- OHAI URY playslave at your service
    --> load /usr/home/mattbw/Music/calif.mp3
    <-- STAT Ejct Stop
    <-- OKAY load /usr/home/mattbw/Music/calif.mp3
================================================================================
+
.Example of +load+ when the file does not exist (or is not playable)
================================================================================
    <-- OHAI URY playslave at your service
    --> load /usr/home/mattbw/nonsuch.mp3
    <-- WHAT NO_FILE couldn't open /usr/home/mattbw/nonsuch.mp3
================================================================================

+stop+::
    If in the *Play* state, switch to the *Stop* state and cease
    playing audio.  The position in the current file *MUST NOT* be lost, but
    a few samples *MAY* be dropped.
+
.Example of +stop+ when in *Play*
================================================================================
    --> stop
    <-- STAT Play Stop
    <-- OKAY stop
================================================================================
+
.Example of +stop+ in an illegal state
================================================================================
    --> stop
    <-- WHAT BAD_STATE Stop not in { Play }
================================================================================

+ejct+::
    If in the *Play* or *Stop* state, cease playing any audio
    and unload the current file.  All state pertaining to the old
    audio file *MUST* be destroyed.  Ejecting whilst in *Ejct* *MAY*
    produce an illegal state error.
+
.Example of +ejct+ when in *Play*
================================================================================
    --> ejct
    <-- STAT Play Ejct
    <-- OKAY ejct
================================================================================
+
.Example of +ejct+ when in *Stop*
================================================================================
    --> ejct
    <-- STAT Stop Ejct
    <-- OKAY ejct
================================================================================

+quit+::
    Ejects the current playing song, if any, and prepares +playslave+
    for shutdown.  Clients *MUST NOT* send any more commands after
    +quit+ unless +quit+ results in an error.
+
.Example of +quit+
================================================================================
    --> quit
    <-- STAT Ejct Quit
    <-- OKAY quit
    <-- TTFN Sleep now
================================================================================

+seek+ _position_::
    If in *Stop* or *Play* state, seeks to the absolute position in the 
    loaded audio specified by _position_ and continues as the current
    state dictates.
    If _position_ ends in +s+ or +sec+, the position is taken as
    seconds from the start of the audio; otherwise it is taken as
    microseconds.
    +seek+ *MAY* temporarily switch states from *Play* to *Stop*
    and back if the original state was *Stop*.  Clients *MUST*
    ignore these state changes until an +OKAY+ or error response is
    caught.
+
.Example of +seek+ whilst playing
================================================================================
    <-- TIME 3065034
    --> SEEK 10s
    <-- STAT Play Stop
    <-- STAT Stop Play
    <-- OKAY seek 10s
    <-- TIME 10092879
================================================================================
+
.Example of +seek+ whilst stopped
================================================================================
    --> seek 4130612
    <-- OKAY seek 4130612
================================================================================
+
.Example of +seek+ whilst in an illegal state
================================================================================
    --> seek 10s
    <-- WHAT BAD_STATE Ejct not in { Play Stop }
================================================================================


Responses
---------

+playslave+ will periodically send output to standard out in the form
of _responses_.

Similarly to commands, each response is of the form +RSPW+ _details_,
where _details_ may be empty.  There *MUST* be _exactly_ one space
between +RSPW+ and _details_.

The following responses are sent by +playslave+:

+OKAY+ _cmd_::
    +playslave+ has just finished executing command _cmd_.  _cmd_ is
    an exact copy of the command line sent to +playslave+.
+WHAT+ _errorcode_ _details_::
    +playslave+ couldn't execute the last command because of an error
    that it believes to be the fault of the command issuer.
+FAIL+ _errorcode_ _details_::
    +playslave+ couldn't execute the last command because of an error
    that it believes to be the fault of the environment, its
    configuration, the audio file itself, or the filesystem.
+OOPS+ _errorcode_ _details_::
    +playslave+ couldn't execute the last command because of an error
    that it believes to be its own fault.  usually this is
    highlighting a bug or deficiency in the +playslave+ interpretation.
+OHAI+ _message_::
    +playslave+ has just started and is in *Ejct* state, ready to
    receive commands.  clients *SHOULD NOT* send commands to a newly
    spawned +playslave+ until receiving an +OHAI+ response.
    Usually _message_ is implementation dependent.
+TTFN+ _message_::
    +playslave+ is saying ``ta ta for now'', and is about to quit.
    Clients *SHOULD NOT* send any further commands.
+STAT+ _old_ _new_::
    +playslave+ has changed state (see above) from the state named by
    _old_ to the state named by _new_.  The client *SHOULD* update its
    user interface accordingly.
+TIME+ _timestamp_::
    If +playslave+ is in *Play*, this is (its estimate of) the current
    position in the song, in microseconds.  The client *SHOULD NOT*
    expect this to be accurate beyond roughly 0.1 seconds precision.
+DBUG+ _message_::
    This is a debug message and *SHOULD* be ignored by the client.
